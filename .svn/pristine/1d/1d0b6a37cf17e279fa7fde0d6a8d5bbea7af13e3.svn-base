#include <vector>
#include "m1.h"
#include "two_opt.h"

//
//void two_opt(std::vector<unsigned> path){
//    //determine what to cut: the longest 2 edges
//    //loop thru entire vector, keep track of 2 longest
//    double longest_distance = 0;
//    double second_longest_dist = 0;
//    unsigned index1, index2;
//
//    for(int i = 0; i < path.size()-1; i++){
//        double dist = find_distance(path[i],path[i+1]);
//        if (dist>longest_distance){
//            second_longest_dist = longest_distance;
//            index2 = index1;
//            longest_distance = dist;
//            index1 = i;
//        }
//        else if(dist > second_longest_dist){
//            second_longest_dist = dist;
//            index2 = i;
//        }
//    }
//
//    //establish the 6 nodes of interest
//    unsigned node1 = path.front();
//    unsigned node2 = path[index1];
//    unsigned node3 = path[index1 + 1];
//    unsigned node4 = path[index2];
//    unsigned node5 = path[index1 + 1];
//    unsigned node6 = path.back();
//
//    //draw 2 lines from 6 vertices
//    for()
//    //pick 2 pairs of vertices
//
//    //compute time
//
//    //if less than orginal and legal, insert into priority queue
//
//    //for top three, calculate actual time
//
//    //pickest the shortest one
//}

// Do all 2-opt combinations
Path& TwoOpt(Path& path){
    // Get path size
    int size = path.pathSize();
 
    // repeat until no improvement is made 
    int improve = 0;
 
    while ( improve < 20 )
    {
        double best_distance = path.pathDistance();
 
        for ( int i = 0; i < size - 1; i++ ) 
        {
            for ( int k = i + 1; k < size; k++) 
            {
                Path new_path = TwoOptSwap( i, k , path);
 
                double new_distance = new_path.pathDistance();
 
                if ( new_distance < best_distance ) 
                {
                    // Improvement found so reset
                    improve = 0;
                    path = new_path;
                    best_distance = new_distance;
                }
            }
        }
 
        improve ++;
    }
    
    return path;
}

Path TwoOptSwap( const int& i, const int& k, Path& path) 
{
    int size = path.pathSize();
    Path new_path;
    new_path.setPathSize(size);
 
    // 1. take route[0] to route[i-1] and add them in order to new_route
    for ( int c = 0; c <= i - 1; ++c )
    {
        new_path.insertNode( c, path.getNode( c ) );
    }
     
    // 2. take route[i] to route[k] and add them in reverse order to new_route
    int dec = 0;
    for ( int c = i; c <= k; ++c )
    {
        new_path.insertNode( c, path.getNode( k - dec ) );
        dec++;
    }
 
    // 3. take route[k+1] to end and add them in order to new_route
    for ( int c = k + 1; c < size; ++c )
    {
        new_path.insertNode( c, path.getNode( c ) );
    }
    
    return new_path;
}




double find_distance_btw_intersections(unsigned inter1, unsigned inter2){
    LatLon pt1 = getIntersectionPosition(inter1);
    LatLon pt2 = getIntersectionPosition(inter2);
    return find_distance_between_two_points(pt1,pt2);
            
}