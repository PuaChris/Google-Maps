#include <iostream>
#include <vector>
#include <cstdlib>

#include <readline/readline.h>
#include <readline/history.h>

#include "StreetsDatabaseAPI.h"

using namespace std;

char** command_completion(const char* stem_text, int start, int end);
char* intersection_name_generator(const char* stem_text, int state);

struct intersectionInfo {
    string name;
    unsigned id;
};

std::vector<intersectionInfo> intersection_names;

void collect_intersections(){
    unsigned numIntersections = getNumberOfIntersections();
    intersection_names.resize(numIntersections);
            
    for (unsigned i = 0; i < numIntersections; i ++){
        intersection_names[i].name = getIntersectionName(i);
        intersection_names[i].id = i;
    }
}


int autocomplete() {

    //Use tab for auto completion
    rl_bind_key('\t', rl_complete);
    rl_bind_key('l', rl_possible_completions);
    rl_bind_key(40, rl_insert_completions);
    //Use our function for auto-complete
    rl_attempted_completion_function = command_completion; 
    //Tell readline to handle double and single quotes for us
    rl_completer_quote_characters = strdup("\"\'"); 
    rl_completion_query_items = 10;
    
    char* buf; //Buffer of line entered by user
    char* old_buf = NULL;
    
    unsigned intersection_id = -1;
    
    if((buf = readline("Please enter intersection name: ")) != NULL) { //Prompt the user for input
        if(strcmp(buf, "") != 0)
            add_history(buf); //Only add to history if user input not empty
        
        //Highlight the intersection
        for (unsigned i = 0; i < getNumberOfIntersections(); i++){
            if (intersection_names[i].name == ((string)buf).substr(1,((string)buf).length()-3)) //truncate the quotation marks from the string
                intersection_id = i;
        }

        //readline generates a new buffer every time, 
        //so we need to free the current one after we've finished
        free(buf);
        buf = NULL; //Mark it null to show we freed it
    }
    
    return intersection_id;
}

//Given the stem 'stem_text' perform auto completion. 
//It returns an array of strings that are potential completions
//
//Note:
// 'start' and 'end' denote the location of 'stem_text' in the global
// 'rl_line_buffer' variable which contains the users current input line.
// If you need more context information to determine how to complete 'stem_text'
// you could look at 'rl_line_buffer'.
char** command_completion(const char* stem_text, int start, int end) {
    char ** matches = NULL;

    if(start != 0) {
        //Only generate completions if stem_text' 
        //is not the first thing in the buffer
        matches = rl_completion_matches(stem_text, intersection_name_generator);
    }

    return matches;
}

//Called repeatedly for a given 'stem_text'. Each time it returns a potential
//match.  When there are no more matches it returns NULL.
//
//The 'state' variable is zero the first time it is called with a given
//'stem_text', and positive afterwards.
char* intersection_name_generator(const char* stem_text, int state) {
    //Static here means a variable's value persists across function invocations
    static int count;

    if(state == 0) { 
        //We initialize the count the first time we are called
        //with this stem_text
        count = -1;
    }

    int text_len = strlen(stem_text);

    //Search through intersection_names until we find a match
    while(count < (int) intersection_names.size()-1) {
        count++;
        const char* name = intersection_names[count].name.c_str();
        if(strncmp(name, stem_text, text_len) == 0) {
            //Must return a duplicate, Readline will handle
            //freeing this string itself.
            return strdup(name);
        }
    }

    //No more matches
    return NULL;
}
