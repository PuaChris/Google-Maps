#include <vector>

#ifndef M3_H
#define M3_H

#define NO_EDGE -1

/*To do: finish BFS
 * Set up graph correctly - all the nodes have access to all OUTGOING edges, all edges have the two nodes
 * Work on BFS path- make sure we're updating reaching edge for adjacent node, 
 * Work on trackback - tbd 
 */

//TO DO:
// 1. add const to const members
// 2. move edge and nodes to a separate file

struct Edge {
    unsigned edge_id;

    unsigned to;
    unsigned from;

    double travel_time;

    Edge();

    Edge(const unsigned ss_id) {
        edge_id = ss_id;

        auto info = getStreetSegmentInfo(ss_id);
        to = info.to;
        from = info.from;

        travel_time = find_street_segment_travel_time(ss_id);
    }

    unsigned getToNode(unsigned node_id) {
        return node_id == from ? to : from;
    }

    bool check_restore(unsigned ss_id) {
        if (edge_id != ss_id)
            return false;

        auto info = getStreetSegmentInfo(ss_id);
        unsigned correct_to = info.to;
        unsigned correct_from = info.from;

        return to == correct_to && from == correct_from && travel_time == find_street_segment_travel_time(ss_id);

    }
};

struct Node {
    unsigned node_id;

    std::vector<unsigned> outgoing_edges; // Outgoing edge ids 

    int reachingEdge = NO_EDGE; // ID of the edge used to reach this node

    double travel_time = FLT_MAX;
    
    double total_time = 0;

    //constructor

    Node(unsigned intersection_id) {

        node_id = intersection_id;

        for (int i = 0; i < getIntersectionStreetSegmentCount(intersection_id); i++) {
            StreetSegmentIndex ss_id = getIntersectionStreetSegment(intersection_id, i);
            auto info = getStreetSegmentInfo(ss_id);

            if (info.oneWay == false || info.from == intersection_id) // check for outgoing edges
                outgoing_edges.push_back(ss_id);
        }
    }

    void restore() {
        reachingEdge = NO_EDGE;
        travel_time = FLT_MAX;
        total_time = 0;
    }

    bool check_restore(unsigned intersection_id) {
        if (node_id != intersection_id){
            std::cout << "Something is wrong with NODE ID!!" << std::endl;
            return false;
        }

        std::vector<unsigned> correct_edges;
        for (int i = 0; i < getIntersectionStreetSegmentCount(intersection_id); i++) {
            StreetSegmentIndex ss_id = getIntersectionStreetSegment(intersection_id, i);
            auto info = getStreetSegmentInfo(ss_id);

            if (info.oneWay == false || info.from == intersection_id) // check for outgoing edges
                correct_edges.push_back(ss_id);
        }


        for (int i = 0; i < correct_edges.size(); i++) {
            if (outgoing_edges[i] != correct_edges[i]){
                std::cout << "Something is wrong with OUTGOING EDGES!" << std::endl;
                std::cout << "actual: " << outgoing_edges[i] << " correct: " << correct_edges[i] << std::endl;
                return false;
            }
        }
        
        if(reachingEdge != NO_EDGE){
            std::cout << "Something is wrong with REACHING EDGES!" << std::endl;
            std::cout << "actual: " << reachingEdge << std::endl;
            return false;
        }
        
        
        if (travel_time != FLT_MAX){
            std::cout << "Something is wrong with TRAVEL TIME!" << std::endl;
            std::cout << "actual: " << travel_time << std::endl;
            return false;
        }
        
        return true;
    }

};


void set_up_graph();
void check_graph_setup();
bool bfsPath(Node* starting_node, unsigned destID, double turning_penalty);
std::vector<unsigned> bfsTraceBack(int destID);

void draw_test_path(std::vector<unsigned>& path);
void collect_curve_points_for_street_segment2(unsigned ss_id);
void collect_street_segments2(std::vector<unsigned> path);

void free_graph();
void restore_node_info();

void set_up_poi_string_to_ids();
std::vector<POIIndex> find_POIs_by_name(std::string name);
bool is_turning(unsigned edge1, unsigned edge2);
void test_restore();


#endif /* M3_H */

