/* 
 * Copyright 2018 University of Toronto
 *
 * Permission is hereby granted, to use this software and associated 
 * documentation files (the "Software") in course work at the University 
 * of Toronto, or for personal use. Other uses are prohibited, in 
 * particular the distribution of the Software either publicly or to third 
 * parties.
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <iostream>
#include <unittest++/UnitTest++.h>
#include <algorithm>
#include "StreetsDatabaseAPI.h"
std::string default_map_path = "/cad2/ece297s/public/maps/toronto_canada.streets.bin";

std::string default_osm_path = "/cad2/ece297s/public/maps/toronto_canada.osm.bin";


void get_all_streets();
void get_intersection_street_segments();
void get_all_street_segments();
void print_poi_data();
void get_path_street_segments();

template<typename Type>
void print_vector(const std::vector<Type> &vec) {
    for (Type item : vec) {
        std::cout << item << std::endl;
    }
}

/*
 * This is the main that drives running
 * unit tests.
 */
int main(int /*argc*/, char** /*argv*/) {
    load_map(default_map_path);
    //    int num_failures = UnitTest::RunAllTests();

    close_map();

    //    return num_failures;
}


// Functional

TEST(find_street_ids_from_name_func) {
    // Manual tests

    std::vector<unsigned> street_ids;

    street_ids = find_street_ids_from_name("Yonge Street");
    CHECK_EQUAL(1, street_ids.size());

    street_ids = find_street_ids_from_name("Nowhere Avenue");
    CHECK_EQUAL(0, street_ids.size());

    street_ids = find_street_ids_from_name("Angus Glen Boulevard");
    CHECK_EQUAL(5, street_ids.size());


    // Automatically generated tests
    int NUM_TESTS = 1000;

    // Seed random generator
    srand(time(NULL));

    // Get number of streets
    int num_streets = getNumberOfStreets();

    // Run specified number of random tests
    for (int i = 0; i < NUM_TESTS; ++i) {
        // Get a random street ID
        int id = rand() % num_streets;

        // Get the street name
        std::string name = getStreetName(id);

        // Check that there are some IDs found with the name, including the original ID
        std::vector<unsigned> ids = find_street_ids_from_name(name);
        CHECK(ids.size() > 0);
        CHECK(find(ids.begin(), ids.end(), id) != ids.end());
    }
}


// Performance

TEST(find_street_ids_from_name_perf) {
    // Seed random generator
    srand(time(NULL));

    // Get number of streets
    int num_streets = getNumberOfStreets();

    // 250ms / 1,000,000 calls = maximum 250ns/call
    int NUM_TESTS = 1000000;
    UNITTEST_TIME_CONSTRAINT(250); // in ms

    // Run specified number of random tests
    for (int i = 0; i < NUM_TESTS; ++i) {
        // Get a random street ID
        int id = rand() % num_streets;

        // Run the function for that street
        find_street_ids_from_name(getStreetName(id));
    }
}

TEST(find_intersection_street_segments) {
    std::vector<unsigned> expected = {156479, 156480, 156488};
    std::vector<unsigned> actual = find_intersection_street_segments(108421);

    CHECK(expected == actual);
}

TEST(find_intersection_street_names) {
    std::vector<std::string> expected(3, "<unknown>");
    std::vector<std::string> wrong = {"this is wrong", "wrong", "very wrong"};
    std::vector<std::string> actual = find_intersection_street_names(108817);
    CHECK(expected == actual);
    CHECK(wrong != actual);

    std::vector<std::string> expected2 = {"<unknown>", "Sherway Gardens Road Ramp", "Sherway Gardens Road", "Sherway Gardens Road"};
    std::vector<std::string> actual2 = find_intersection_street_names(22492);
    CHECK(expected2 == actual2);
}

TEST(are_directly_connected) {
    // Two way
    CHECK(are_directly_connected(96121, 18899));
    CHECK(are_directly_connected(18899, 96121));

    // One way
    CHECK(are_directly_connected(64452, 64383));
    CHECK(!are_directly_connected(64383, 64452));
}








// These functions are used to get data for generating test cases

void get_all_streets() {
    int num_streets = getNumberOfStreets();
    std::cout << "Total number of streets: " << num_streets << std::endl;
    std::vector<std::string> street_names(num_streets);
    for (int i = 0; i < num_streets; ++i) {
        street_names[i] = getStreetName(i);
    }

    std::sort(street_names.begin(), street_names.end());
    std::cout << "Duplicates:" << std::endl;
    for (int i = 0; i < num_streets - 1; ++i) {
        if (street_names[i] == street_names[i + 1]) {
            std::cout << street_names[i] << std::endl;
        }
    }
}

void get_intersection_street_segments() {
    unsigned num_intersections = getNumberOfIntersections();
    for (unsigned i = 0; i < num_intersections; ++i) {
        std::cout << "Intersection " << i << ": ";
        for (unsigned j = 0; j < getIntersectionStreetSegmentCount(i); ++j) {
            StreetSegmentIndex segment = getIntersectionStreetSegment(i, j);
            std::cout << segment << "(" << getStreetName(getStreetSegmentInfo(segment).streetID) << "), ";
        }
        std::cout << std::endl;
    }
}

void get_all_street_segments() {
    int num_segments = getNumberOfStreetSegments();
    std::cout << "Total number of street segments: " << num_segments << std::endl;

    for (int i = 0; i < num_segments; ++i) {
        StreetSegmentInfo info = getStreetSegmentInfo(i);
        std::cout << info.from << " -> " << info.to << " ";
        std::cout << (info.oneWay ? "one way" : "two way") << std::endl;
    }
}

void print_poi_data() {
    for (size_t i = 0; i < getNumberOfPointsOfInterest(); ++i) {
        std::cout << getPointOfInterestName(i) << " " << getPointOfInterestType(i) << std::endl << std::endl;
    }
}

void get_path_street_segments() {
    //    std::vector<unsigned> intersections = {12788, 12787, 2363, 1110, 1113, 1884, 2362, 26238, 2361};
    std::vector<unsigned> intersections = {2361};
    for (unsigned intersection : intersections) {
        std::cout << intersection << ": ";
        for (int i = 0; i < getIntersectionStreetSegmentCount(intersection); ++i) {
            std::cout << getIntersectionStreetSegment(intersection, i) << " ";
        }
        std::cout << std::endl;
    }
}

std::vector<StreetSegmentIndex> dijkstra(IntersectionIndex start_intersection, IntersectionIndex destination) {

    /* NOTES: 
     *If a node visited has a new lower total_time value, update it but don't add it to the wavefront
     * Must check EVERY node and not just stop at the first path found at the destination 
     *
     * 
     */
    
    unsigned numberOfIntersections = getNumberOfIntersections();
    bool destination_found = false;

    struct adjacent_info {
        IntersectionIndex id = -1;
        IntersectionIndex prev_id = -1;
        StreetSegmentIndex prev_street = -1;
    } adjacent;


    std::priority_queue <AdjacentPair, std::vector<AdjacentPair>, std::greater<AdjacentPair> > wavefront;
    std::vector <adjacent_info> explored_nodes;
    std::vector <StreetSegmentIndex> path;
    std::vector<double> total_time(numberOfIntersections, FLT_MAX);


    //begin with start_intersection, set current_nodeId total_time to 0
    total_time[start_intersection] = 0;
    wavefront.push(std::make_pair(total_time[start_intersection], start_intersection));
    
    /******************************************************************/
//     Replace wavefront.top() with wavefront.front() equivalent
    IntersectionIndex current_nodeId = wavefront.top().second;
/************************************************************************/

    while (!wavefront.empty() 
            &&!destination_found) {

        //total_time is stored in the first member while the intersection_id is stored in the second order
        //must be stored this way to sort total_time in ascending order 
        wavefront.pop();

        std::vector <StreetSegmentIndex> adjacent_streets = map_data->find_intersection_street_segments(current_nodeId);


        for (StreetSegmentIndex segment_id = 0; segment_id < adjacent_streets.size(); segment_id++) {
            StreetSegmentInfo street_info = getStreetSegmentInfo(adjacent_streets[segment_id]);

            adjacent.id = street_info.to;

            if (are_directly_connected(current_nodeId, adjacent.id)
                    && current_nodeId != adjacent.id) {

                //weights being the travel time between the current_nodeId and adjacent intersection 
                double travel_time = find_street_segment_travel_time(segment_id);

                if (total_time[adjacent.id] > total_time[current_nodeId] + travel_time) {
                    total_time[adjacent.id] = total_time[current_nodeId] + travel_time;
                    
                    //Adding checked intersection to the wavefront 
                    wavefront.push(std::make_pair(total_time[adjacent.id], adjacent.id));

                    adjacent.prev_id = current_nodeId;
                    adjacent.prev_street = segment_id;

                    explored_nodes.push_back(adjacent);
                    
                    if (adjacent.id == destination){
                        destination_found = true;
                        break; 
                    }
                }
            }
        }
    }

    if (destination_found) {
        //Last adjacent segment to be added at the destination
        IntersectionIndex prev_intersection = explored_nodes[explored_nodes.size() - 1].prev_id;
        path.push_back(explored_nodes[explored_nodes.size() - 1].prev_street);

        for (unsigned num_segments = 0; num_segments < explored_nodes.size(); num_segments++) {
            if (explored_nodes[num_segments].id = prev_intersection) {
                prev_intersection = explored_nodes[num_segments].prev_id;
                path.push_back(explored_nodes[num_segments].prev_street);
            }
        }
        std::reverse(path.begin(), path.end());
    }
    
    
    else {
        //Return an empty vector
        std::cout << "No path to destination" << std::endl;
        path.clear();
    }

    return path;

}
