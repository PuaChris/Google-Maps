#include "m3.h"
#include "m4.h"
#include "math.h"
#include <vector>
#include "utilities.h"
#include "StreetsDatabaseAPI.h"

typedef unsigned pickUpID;
typedef unsigned dropOffID;
typedef unsigned depotID;

std::vector<unsigned> traveling_courier_greedy(const std::vector<DeliveryInfo>& deliveries,
        const std::vector<unsigned>& depots,
        const float turn_penalty) {

    //Plan right now is to go through all of the pick ups and then go through all the drop offs

    //We choose what depot we want for testing purposes    

    std::vector<IntersectionIndex> path_intersections;
    std::vector<StreetSegmentIndex> path_street_segments;
    std::vector<pickUpID> pick_up_remaining;
    std::vector<dropOffID> drop_off_remaining;

    // Start at first depot
    IntersectionIndex current_intersection = depots[0];
    path_intersections.push_back(current_intersection);

    for (DeliveryInfo delivery_info : deliveries) {
        pick_up_remaining.push_back(delivery_info.pickUp);
        drop_off_remaining.push_back(delivery_info.dropOff);
    }


    // 1. Pickups
    while (!pick_up_remaining.empty()) {
        //    Choosing a random depot at start 
        std::priority_queue<std::pair<double, pickUpID>, std::vector <std::pair<double, pickUpID>>, std::greater<std::pair<double, pickUpID>>> pick_up_front;

        for (pickUpID next_intersection : pick_up_remaining) {
            double distance = find_distance_between_two_points(getIntersectionPosition(current_intersection), getIntersectionPosition(next_intersection));
            pick_up_front.push(std::make_pair(distance, next_intersection));
        }

        pickUpID next_intersection = pick_up_front.top().second;
        pick_up_front.pop();

        path_intersections.push_back(next_intersection);

        std::vector<StreetSegmentIndex> path = find_path_between_intersections(current_intersection, next_intersection, turn_penalty);
        path_street_segments.insert(path_street_segments.end(), path.begin(), path.end());

        pick_up_remaining.erase(std::remove(pick_up_remaining.begin(), pick_up_remaining.end(), next_intersection), pick_up_remaining.end());

        current_intersection = next_intersection;
    }


    // 2. Drop offs
    while (!drop_off_remaining.empty()) {
        //    Choosing a random depot at start 
        std::priority_queue<std::pair<double, dropOffID>, std::vector <std::pair<double, dropOffID>>, std::greater<std::pair<double, dropOffID>>> drop_off_front;

        for (dropOffID next_intersection : drop_off_remaining) {
            double distance = find_distance_between_two_points(getIntersectionPosition(current_intersection), getIntersectionPosition(next_intersection));
            drop_off_front.push(std::make_pair(distance, next_intersection));
        }

        dropOffID next_intersection = drop_off_front.top().second;
        drop_off_front.pop();

        path_intersections.push_back(next_intersection);

        std::vector<StreetSegmentIndex> path = find_path_between_intersections(current_intersection, next_intersection, turn_penalty);
        path_street_segments.insert(path_street_segments.end(), path.begin(), path.end());

        drop_off_remaining.erase(std::remove(drop_off_remaining.begin(), drop_off_remaining.end(), next_intersection), drop_off_remaining.end());

        current_intersection = next_intersection;
    }

    // 3. Depot
    std::priority_queue<std::pair<double, depotID>, std::vector <std::pair<double, depotID>>, std::greater<std::pair<double, depotID>>> depot_front;

    for (depotID next_intersection : depots) {
        double distance = find_distance_between_two_points(getIntersectionPosition(current_intersection), getIntersectionPosition(next_intersection));
        depot_front.push(std::make_pair(distance, next_intersection));
    }

    depotID next_intersection = depot_front.top().second;
    depot_front.pop();

    path_intersections.push_back(next_intersection);

    std::vector<StreetSegmentIndex> path = find_path_between_intersections(current_intersection, next_intersection, turn_penalty);
    path_street_segments.insert(path_street_segments.end(), path.begin(), path.end());

    return path_street_segments;

}

std::vector<unsigned> traveling_courier(const std::vector<DeliveryInfo>& deliveries,
        const std::vector<unsigned>& depots,
        const float turn_penalty) {
    return traveling_courier_greedy(deliveries, depots, turn_penalty);
}


